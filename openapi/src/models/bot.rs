/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Bot : BOT情報



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Bot {
    /// BOT UUID
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// BOTユーザーUUID
    #[serde(rename = "botUserId")]
    pub bot_user_id: uuid::Uuid,
    /// 説明
    #[serde(rename = "description")]
    pub description: String,
    /// BOT開発者UUID
    #[serde(rename = "developerId")]
    pub developer_id: uuid::Uuid,
    /// BOTが購読しているイベントの配列
    #[serde(rename = "subscribeEvents")]
    pub subscribe_events: Vec<String>,
    #[serde(rename = "mode")]
    pub mode: crate::models::BotMode,
    #[serde(rename = "state")]
    pub state: crate::models::BotState,
    /// 作成日時
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// 更新日時
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl Bot {
    /// BOT情報
    pub fn new(id: uuid::Uuid, bot_user_id: uuid::Uuid, description: String, developer_id: uuid::Uuid, subscribe_events: Vec<String>, mode: crate::models::BotMode, state: crate::models::BotState, created_at: String, updated_at: String) -> Bot {
        Bot {
            id,
            bot_user_id,
            description,
            developer_id,
            subscribe_events,
            mode,
            state,
            created_at,
            updated_at,
        }
    }
}


