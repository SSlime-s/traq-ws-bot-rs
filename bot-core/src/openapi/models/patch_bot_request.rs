/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// PatchBotRequest : BOT情報変更リクエスト

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PatchBotRequest {
    /// BOTユーザー表示名
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// BOTの説明
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// 特権
    #[serde(rename = "privileged", skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<crate::openapi::models::BotMode>,
    /// BOTサーバーエンドポイント
    #[serde(rename = "endpoint", skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// 移譲先の開発者UUID
    #[serde(rename = "developerId", skip_serializing_if = "Option::is_none")]
    pub developer_id: Option<uuid::Uuid>,
    /// 購読するイベント
    #[serde(rename = "subscribeEvents", skip_serializing_if = "Option::is_none")]
    pub subscribe_events: Option<Vec<String>>,
}

impl PatchBotRequest {
    /// BOT情報変更リクエスト
    pub fn new() -> PatchBotRequest {
        PatchBotRequest {
            display_name: None,
            description: None,
            privileged: None,
            mode: None,
            endpoint: None,
            developer_id: None,
            subscribe_events: None,
        }
    }
}
